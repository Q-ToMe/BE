buildscript {
    ext {
        restdocsApiSpecVersion = '0.18.2' // restdocsApiSpecVersion 버전 변수 설정
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.jetbrains.kotlin.jvm'
    // epages-restdocs 플러그인 추가
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
    //swagger generator 플러그인 추가
    id 'org.hidetake.swagger.generator' version '2.18.2'
}
jar{
    enabled=false
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
ext {
//snippetsDirectory 설정
    snippetsDir = file('build/generated-snippets')
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    implementation 'mysql:mysql-connector-java:8.0.32'
//    implementation 'io.springfox:springfox-boot-starter:3.0.0'
//    implementation 'io.springfox:springfox-swagger-ui:3.0.0'

    // Spring REST Docs 의존성
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    // epages REST Docs 의존성
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"
    // Swagger 의존성
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'com.slack.api:slack-api-client:1.30.0'
}

tasks.named('test') {
    useJUnitPlatform()
}
kotlin {
    jvmToolchain(17)
}
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17


tasks.withType(GenerateSwaggerUI) {
// openapi3 테스크 이후에 실행 됨
    dependsOn 'openapi3'

    //기존 파일 삭제했다가, build 에 json 정적파일 복사 (안해도 됨 → local 확인용)
    delete file('src/main/resources/static/docs/')
    copy {
        from "build/resources/main/static/docs"
        into "src/main/resources/static/docs/"
    }
}

// restdocs-api 옵션 설정 외에 설정은 공식문서 참고
openapi3 {
    server = "http://localhost:8080"
    title = "SAMPLE API 문서"
    description = "Spring REST Docs with SwaggerUI."
    version = "0.0.1"
    outputFileNamePrefix = 'SAMPLE - 0.0.1'
    format = 'json'

    // /static/docs/SAMPLE - 0.0.1.json 생성 → jar 파일만 배포할 예정이기에 build 에 출력
    outputDirectory = 'build/resources/main/static/docs'
}

//openAPI 작성 자동화를 위해 패키징 전에 openapi3 테스크 선실행 설정
bootJar {
    dependsOn(':openapi3')
}